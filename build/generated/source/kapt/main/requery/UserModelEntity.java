// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package requery;

import io.requery.CascadeAction;
import io.requery.Persistable;
import io.requery.meta.Attribute;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.Cardinality;
import io.requery.meta.NumericAttributeDelegate;
import io.requery.meta.SetAttributeBuilder;
import io.requery.meta.StringAttributeDelegate;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Set;
import javax.annotation.Generated;

@Generated("io.requery.processor.EntityProcessor")
public class UserModelEntity implements UserModel, Persistable {
    public static final NumericAttributeDelegate<UserModelEntity, Integer> ID = new NumericAttributeDelegate(
    new AttributeBuilder<UserModelEntity, Integer>("id", int.class)
    .setProperty(new IntProperty<UserModelEntity>() {
        @Override
        public Integer get(UserModelEntity entity) {
            return entity.id;
        }

        @Override
        public void set(UserModelEntity entity, Integer value) {
            entity.id = value;
        }

        @Override
        public int getInt(UserModelEntity entity) {
            return entity.id;
        }

        @Override
        public void setInt(UserModelEntity entity, int value) {
            entity.id = value;
        }
    })
    .setPropertyName("getId")
    .setPropertyState(new Property<UserModelEntity, PropertyState>() {
        @Override
        public PropertyState get(UserModelEntity entity) {
            return entity.$id_state;
        }

        @Override
        public void set(UserModelEntity entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(true)
    .setReadOnly(true)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric());

    public static final Attribute<UserModelEntity, Set<ProjectModel>> PROJECTS = 
    new SetAttributeBuilder<UserModelEntity, Set<ProjectModel>, ProjectModel>("projects", Set.class, ProjectModel.class)
    .setProperty(new Property<UserModelEntity, Set<ProjectModel>>() {
        @Override
        public Set<ProjectModel> get(UserModelEntity entity) {
            return entity.projects;
        }

        @Override
        public void set(UserModelEntity entity, Set<ProjectModel> value) {
            entity.projects = value;
        }
    })
    .setPropertyName("getProjects")
    .setPropertyState(new Property<UserModelEntity, PropertyState>() {
        @Override
        public PropertyState get(UserModelEntity entity) {
            return entity.$projects_state;
        }

        @Override
        public void set(UserModelEntity entity, PropertyState value) {
            entity.$projects_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(true)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setCascadeAction(CascadeAction.SAVE)
    .setCardinality(Cardinality.ONE_TO_MANY)
    .setMappedAttribute(new Supplier<Attribute>() {
        @Override
        public Attribute get() {
            return ProjectModelEntity.OWNER;
        }
    })
    .build();

    public static final StringAttributeDelegate<UserModelEntity, String> NAME = new StringAttributeDelegate(
    new AttributeBuilder<UserModelEntity, String>("name", String.class)
    .setProperty(new Property<UserModelEntity, String>() {
        @Override
        public String get(UserModelEntity entity) {
            return entity.name;
        }

        @Override
        public void set(UserModelEntity entity, String value) {
            entity.name = value;
        }
    })
    .setPropertyName("getName")
    .setPropertyState(new Property<UserModelEntity, PropertyState>() {
        @Override
        public PropertyState get(UserModelEntity entity) {
            return entity.$name_state;
        }

        @Override
        public void set(UserModelEntity entity, PropertyState value) {
            entity.$name_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString());

    public static final Type<UserModelEntity> $TYPE = new TypeBuilder<UserModelEntity>(UserModelEntity.class, "UserModel")
    .setBaseType(UserModel.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<UserModelEntity>() {
        @Override
        public UserModelEntity get() {
            return new UserModelEntity();
        }
    })
    .setProxyProvider(new Function<UserModelEntity, EntityProxy<UserModelEntity>>() {
        @Override
        public EntityProxy<UserModelEntity> apply(UserModelEntity entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(PROJECTS)
    .addAttribute(ID)
    .addAttribute(NAME)
    .build();

    private PropertyState $id_state;

    private PropertyState $projects_state;

    private PropertyState $name_state;

    private int id;

    private Set<ProjectModel> projects;

    private String name;

    private final transient EntityProxy<UserModelEntity> $proxy = new EntityProxy<UserModelEntity>(this, $TYPE);

    public UserModelEntity() {
    }

    @Override
    public int getId() {
        return $proxy.get(ID);
    }

    @Override
    public Set<ProjectModel> getProjects() {
        return $proxy.get(PROJECTS);
    }

    @Override
    public String getName() {
        return $proxy.get(NAME);
    }

    public void setName(String name) {
        $proxy.set(NAME, name);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof UserModelEntity && ((UserModelEntity)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
